# -*- coding: utf-8 -*-
"""Copy of dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12Hqldqt5Y14i51sq_1pwP-fzaCe0AChH
"""

from PIL import Image
import os
from torch.utils.data import Dataset
import numpy as np

class XYDataset(Dataset): # X is the original input image, Y is the intended generated output image
    def __init__(self, root_Y, root_X, transform = None):
        self.root_Y = root_Y
        self.root_X = root_X
        self.transform = transform

        self.Y_images = os.listdir(root_Y)
        self.X_images = os.listdir(root_X)
        self.length_dataset = max(len(self.Y_images), len(self.X_images)) # length of data set is not equal because the data sets are unpaired
        self.Y_len = len(self.Y_images) # length of Y images
        self.X_len = len(self.X_images) # length of X imagas

    def __len__(self):
        return self.length_dataset # length of dataset

    def __getitem__(self, index):
        Y_img = self.Y_images[index % self.Y_len] # % to prevent index error
        X_img = self.X_images[index % self.X_len]

        Y_path = os.path.join(self.root_Y, Y_img)
        X_path = os.path.join(self.root_X, X_img)

        Y_img = np.array(Image.open(Y_path).convert("RGB"))
        X_img = np.array(Image.open(X_path).convert("RGB"))

        if self.transform:
            augmentations = self.transform(image = Y_img, image0 = X_img)
            Y_img = augmentations["image"]
            X_img = augmentations["image0"] # image0 is called out in the config file

        return Y_img, X_img