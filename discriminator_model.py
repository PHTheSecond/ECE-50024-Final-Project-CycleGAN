# -*- coding: utf-8 -*-
"""Copy of discriminator_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_44exYxzpA8_qM4shEXjQtAG4vYqfD1x
"""

import torch
import torch.nn as nn

class Block(nn.Module): # 
    def __init__(self, in_channels, out_channels, stride):
        super().__init__()
        self.conv = nn.Sequential(
            nn.Conv2d( # Convolution for upsampling, Kernal size is 4 per paper, padding mode set to reflect helps reduce artifacs per the paper
                in_channels, 
                out_channels, 
                4, 
                stride, 
                1, 
                bias = True, 
                padding_mode = "reflect"
            ),
            nn.InstanceNorm2d(out_channels),
            nn.LeakyReLU(0.2)
        )

    def forward(self, x):
        return self.conv(x)

class Discriminator(nn.Module):
    def __init__(self, in_channels = 3, features = [64, 128, 256, 512]):
        super().__init__()
        self.initial = nn.Sequential(
            nn.Conv2d(
                in_channels, 
                features[0], 
                kernel_size = 4, 
                stride = 2,
                padding = 1, 
                padding_mode = "reflect"
            ),
            nn.LeakyReLU(0.2)
        )

        layers = []
        in_channels = features[0]
        for feature in features[1:]:
            layers.append(
                Block(
                    in_channels, 
                    feature, 
                    stride = 1 if feature == features[-1] else 2)
                )
            in_channels = feature
        layers.append(
            nn.Conv2d(
                in_channels, 
                1, 
                kernel_size = 4, 
                stride = 1,
                padding = 1, 
                padding_mode = "reflect"
            )
        )
        self.model = nn.Sequential(*layers)

    def forward(self, x):
        x = self.initial(x)
        return torch.sigmoid(self.model(x)) # Sigmoid to ensure output is between 0 and 1